// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    ext {
        // Versions for all the dependencies we plan to use. It's particularly useful for kotlin and
        // navigation where the versions of the plugin needs to be the same as the version of the
        // library defined in the app Gradle file
        androidXTestCoreVersion = '1.2.0'
        androidXTestExtKotlinRunnerVersion = '1.1.1'

        nav_version = "2.3.0-alpha04"
        version_android_gradle_plugin = "3.3.2"
        version_core = "1.0.1"
        version_constraint_layout = "1.1.3"
        version_glide = "4.8.0"
        version_kotlin = "1.3.50"
        version_kotlin_coroutines = "1.1.0"
        version_lifecycle_extensions = "2.0.0"
        version_moshi = "1.8.0"
        version_navigation = "1.0.0"
        version_retrofit = "2.6.0"
        version_retrofit_coroutines_adapter = "0.9.2"
        version_recyclerview = "1.0.0"
        version_room = "2.0.0"
        version_work = "1.0.0-alpha11"
        version_timber = "4.7.1"

        androidxTextExtKotlinRunnerVersion = "1.1.0"
        archTestingVersion = '2.0.0'
        espressoVersion = "3.1.1"
        hamcrestVersion = '1.3'
        junitVersion = "4.12"
        robolectricVersion = '4.3.1'

        dagger_version = "2.27"
        multidex_version = "2.0.1"


        libraries = [
                'androidx.legacy:legacy-support-v4:1.0.0',

                // Kotlin
                "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$version_kotlin",
                'androidx.appcompat:appcompat:1.0.2',
                'androidx.core:core-ktx:1.0.2',

                // Constraint Layout
                "androidx.constraintlayout:constraintlayout:$version_constraint_layout",

                // ViewModel and LiveData
                "androidx.lifecycle:lifecycle-extensions:$version_lifecycle_extensions",

                // Navigation
                "android.arch.navigation:navigation-fragment-ktx:$version_navigation",
                "android.arch.navigation:navigation-ui-ktx:$version_navigation",


                // Core with Ktx
                "androidx.core:core-ktx:$version_core",


                //    Dependencies for Moshi
                "com.squareup.moshi:moshi:$version_moshi",
                "com.squareup.moshi:moshi-kotlin:$version_moshi",

                "com.squareup.retrofit2:retrofit: $version_retrofit",

                //    implementation "com.squareup.retrofit2:converter-scalars:$version_retrofit"
                "com.squareup.retrofit2:converter-moshi:$version_retrofit",

                //    dependencies for both Coroutines and for the Retrofit Coroutines Adapter
                "org.jetbrains.kotlinx:kotlinx-coroutines-core:$version_kotlin_coroutines",
                "org.jetbrains.kotlinx:kotlinx-coroutines-android:$version_kotlin_coroutines",
                "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$version_retrofit_coroutines_adapter",

                //    Glide library dependency
                "com.github.bumptech.glide:glide:$version_glide",

                //    Gradle dependency for the RecyclerView
                "androidx.recyclerview:recyclerview:$version_recyclerview",

                // Room database
                "androidx.room:room-runtime:$version_room",
                'com.google.android.play:core-ktx:1.6.5',

                // Logging
                "com.jakewharton.timber:timber:$version_timber"
        ]

        workManager = [
                // WorkManager
                "android.arch.work:work-runtime-ktx:$version_work"
        ]

        kapts = [
                "androidx.room:room-compiler:$version_room",
                "com.google.dagger:dagger-compiler:$dagger_version",
                "com.google.dagger:dagger-android-processor:$dagger_version"
        ]

        firebase = [
                // Firebase SDK for Google Analytics
                'com.google.firebase:firebase-analytics:17.2.2',

                //    Firebase Crashlytics SDK.
                'com.google.firebase:firebase-crashlytics:17.0.0'
        ]

        multidex = [
                "androidx.multidex:multidex:$multidex_version"
        ]

        dagger = [
                "com.google.dagger:dagger:$dagger_version",
                "com.google.dagger:dagger-android:$dagger_version",
                "com.google.dagger:dagger-android-support:$dagger_version"
        ]

        testImplementation = [

                // Dependencies for local unit tests
                "junit:junit:$junitVersion",
                "org.hamcrest:hamcrest-all:$hamcrestVersion",
                "androidx.arch.core:core-testing:$archTestingVersion",
                "org.robolectric:robolectric:$robolectricVersion",
                "androidx.test.ext:junit-ktx:$androidXTestExtKotlinRunnerVersion",
                "androidx.test:core-ktx:$androidXTestCoreVersion",

                //  This package provides testing utilities for effectively testing coroutines.
                'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.6'
        ]

        androidTestImplementation = [
                // Androidx Test -Instrumented testing
                "androidx.test.ext:junit:$androidxTextExtKotlinRunnerVersion",
                "androidx.test.espresso:espresso-core:$espressoVersion"
        ]

    }

    repositories {
        google()
        jcenter()
        
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$version_kotlin"
        classpath "android.arch.navigation:navigation-safe-args-gradle-plugin:$version_navigation"
        classpath 'com.google.gms:google-services:4.3.3'
//        Crashlytics Gradle plugin.
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.1.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
